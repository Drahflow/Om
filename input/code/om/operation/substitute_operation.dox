/*!
\defgroup om__operation__substitute_operation__ substitute
	\ingroup om__operation__
	\brief
		Applies a \ref om__lexicon__ to an \ref om__expression__ resulting in recursive \ref om__operator__ replacement, without using definitions from the enclosing scope.
	\par Input
		<tt>{lexicon} {expression}</tt>
	\par Output
		<tt>{lexicon} {evaluation}</tt>
	\par Examples
		-	<tt>substitute{A{1}}{A}</tt>
			<blockquote><tt>{A{1}}{1}</tt></blockquote>
		-	<tt>substitute{A{1}}{do{A}}</tt>
			<blockquote><tt>{A{1}}{do{A}}</tt></blockquote>
	\par Implementation
		Om::Operation::SubstituteOperation

	Looking up an \ref om__operator__ in the \ref om__lexicon__ has the following possible outcomes:
	-	The \ref om__operator__ not found:
		-	The default (empty \ref om__operator__ mapping), if any, is used.
	-	The \ref om__operator__ is found, but has no mapping:
		-	The \ref om__operator__ is considered "undefined" and no further checking is done.
	-	The \ref om__operator__ is found, and has an \ref om__operand__ mapping:
		-	The \ref om__operator__ is replaced with the \ref om__operand__ \ref om__program__.
*/
